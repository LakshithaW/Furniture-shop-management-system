/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package Interface_Finance;

import mycode.DBconnect;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import javax.swing.JOptionPane;
import net.proteanit.sql.DbUtils;


public class cost extends javax.swing.JFrame {

    
        Connection con = null;
    PreparedStatement pst = null;
    ResultSet rs = null;
    PreparedStatement ps1=null;
    ResultSet rs1=null;
    PreparedStatement ps2=null;
    ResultSet rs2=null;
    /**
     * Creates new form intcostprofit
     */
    public cost() {
        initComponents();
        
        con = DBconnect.connect();
        // load table
        tableload();
        fillcombo();
        
        btnDelete.setEnabled(false);
        btnUpdate.setEnabled(false);
    }

    
     public void tableload() {
        //to load the table 
        
        try {
            String sq1 = " SELECT product,model,factoryCost,overHead,salesCommission,netPrice,sellingPrice,profitRate,profit from furniturecost";
            pst = con.prepareStatement(sq1);
            rs = pst.executeQuery();

            jTable1.setModel(DbUtils.resultSetToTableModel(rs));
        } catch (Exception e) {
            System.out.println(e);
        }
    }

    
    public void fillcombo()
    {
        //fill the comboboxses 
        
        String sql = "select distinct product from furniture";
        try
        {
            pst = con.prepareStatement(sql);
            rs = pst.executeQuery();
            cmbprodbox.removeAllItems();
            //cmbmodbox.removeAllItems();
            
            while(rs.next()){
                cmbprodbox.addItem(rs.getString("product"));
                
            }
        }
        catch(Exception e)
        {
        
            System.out.println(e);
            System.out.println("fur");
        }
    }
    
    
    
    public boolean validator()
    {
           if(cmbprodbox.getSelectedItem().toString().equals("Select a product Type"))
        {
            JOptionPane.showMessageDialog(null,"Select a product Type");
            return false;
        }
           
             if(cmbmodbox.getSelectedItem().toString().equals("Select a model Type"))
        {
            JOptionPane.showMessageDialog(null,"Select a model Type");
            return false;
        }
        
             if (txtfcos.getText().equals(""))
        {
            JOptionPane.showMessageDialog(null,"Factory cost  Field is Empty  please click FindFactorycost button");
            return false;
        }
        
        if (txtoh.getText().equals(""))
        {
            JOptionPane.showMessageDialog(null,"Over head rate Field is Empty ");
            return false;
        }
        
        
           if (txtsc.getText().equals(""))
        {
            JOptionPane.showMessageDialog(null,"Sell commition rate Field is Empty ");
            return false;
        }
           
              if (txtpf.getText().equals(""))
        {
            JOptionPane.showMessageDialog(null,"Profit rate Field is Empty ");
            return false;
        }
              
                        if (!txtsep.getText().equals(""))
        {
            JOptionPane.showMessageDialog( null,"Selling price Field is not Empty ");
            return false;
        }
        
         return true;
        
    }
     
        public void Reset()
    {
        btnAdd.setEnabled(true);
        btnDelete.setEnabled(false);
        btnUpdate.setEnabled(false);
    
    txtfcos.setText("");
    txtoh.setText("");
    txtsc.setText("");
    txtnp.setText("");
    txtsep.setText("");
    txtpf.setText("");
    txtdrcsrch.setText("");
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jLabel6 = new javax.swing.JLabel();
        cmbprodbox = new javax.swing.JComboBox();
        txtsc = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        jButton3 = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();
        txtnp = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        cmbmodbox = new javax.swing.JComboBox();
        txtoh = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        fatoryCost = new javax.swing.JButton();
        jLabel8 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        txtfcos = new javax.swing.JTextField();
        txtpf = new javax.swing.JTextField();
        txtsep = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        btnReset = new javax.swing.JButton();
        btnUpdate = new javax.swing.JButton();
        btnDelete = new javax.swing.JButton();
        btnAdd = new javax.swing.JButton();
        jButton1 = new javax.swing.JButton();
        txtdrcsrch = new javax.swing.JTextField();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setPreferredSize(new java.awt.Dimension(850, 500));

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null}
            },
            new String [] {
                "Product", "Model", "Factory cost", "Over Head", "Sales commision", "Net price", "Selling price", "Profitrate", "profit"
            }
        ));
        jTable1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTable1MouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(jTable1);

        jLabel6.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel6.setText("Sales commision rate ");

        cmbprodbox.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        cmbprodbox.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                cmbprodboxItemStateChanged(evt);
            }
        });
        cmbprodbox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmbprodboxActionPerformed(evt);
            }
        });

        txtsc.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        txtsc.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtscActionPerformed(evt);
            }
        });
        txtsc.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtscKeyReleased(evt);
            }
        });

        jLabel2.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel2.setText("Product");

        jButton3.setFont(new java.awt.Font("Times New Roman", 0, 18)); // NOI18N
        jButton3.setText("Search");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        jLabel3.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel3.setText("Model");

        txtnp.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        txtnp.setText("Net Price");

        jLabel7.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel7.setText("Net Price ");

        cmbmodbox.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        cmbmodbox.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                cmbmodboxItemStateChanged(evt);
            }
        });
        cmbmodbox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmbmodboxActionPerformed(evt);
            }
        });

        txtoh.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtohKeyReleased(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtohKeyTyped(evt);
            }
        });

        jLabel4.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel4.setText("Factory Cost");

        jLabel5.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel5.setText("Overhead Rate");

        fatoryCost.setFont(new java.awt.Font("Times New Roman", 0, 18)); // NOI18N
        fatoryCost.setText("Find Factory Cost");
        fatoryCost.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                fatoryCostActionPerformed(evt);
            }
        });

        jLabel8.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel8.setText("Selling price");

        jLabel9.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel9.setText("Profit rate");

        txtfcos.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtfcosActionPerformed(evt);
            }
        });
        txtfcos.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtfcosKeyReleased(evt);
            }
        });

        txtpf.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtpfKeyReleased(evt);
            }
        });

        txtsep.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtsepActionPerformed(evt);
            }
        });
        txtsep.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtsepKeyReleased(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Times New Roman", 1, 24)); // NOI18N
        jLabel1.setText("Cost & profit");

        btnReset.setFont(new java.awt.Font("Times New Roman", 0, 18)); // NOI18N
        btnReset.setText("Reset");
        btnReset.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnResetActionPerformed(evt);
            }
        });

        btnUpdate.setFont(new java.awt.Font("Times New Roman", 0, 18)); // NOI18N
        btnUpdate.setText("Update");
        btnUpdate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnUpdateActionPerformed(evt);
            }
        });

        btnDelete.setFont(new java.awt.Font("Times New Roman", 0, 18)); // NOI18N
        btnDelete.setText("Delete");
        btnDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeleteActionPerformed(evt);
            }
        });

        btnAdd.setFont(new java.awt.Font("Times New Roman", 0, 18)); // NOI18N
        btnAdd.setText("Add");
        btnAdd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddActionPerformed(evt);
            }
        });

        jButton1.setFont(new java.awt.Font("Times New Roman", 0, 18)); // NOI18N
        jButton1.setText("Back");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 742, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(25, 25, 25)
                                .addComponent(jLabel9, javax.swing.GroupLayout.PREFERRED_SIZE, 74, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(67, 67, 67)
                                .addComponent(txtpf, javax.swing.GroupLayout.PREFERRED_SIZE, 113, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(30, 30, 30)
                                .addComponent(jLabel4)
                                .addGap(18, 18, 18)
                                .addComponent(txtfcos, javax.swing.GroupLayout.PREFERRED_SIZE, 109, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(51, 51, 51)
                                .addComponent(fatoryCost))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(127, 127, 127)
                                .addComponent(btnAdd, javax.swing.GroupLayout.PREFERRED_SIZE, 95, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(27, 27, 27)
                                .addComponent(btnUpdate, javax.swing.GroupLayout.PREFERRED_SIZE, 95, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(btnDelete, javax.swing.GroupLayout.PREFERRED_SIZE, 95, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(20, 20, 20)
                                .addComponent(btnReset, javax.swing.GroupLayout.PREFERRED_SIZE, 95, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(25, 25, 25)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addGroup(layout.createSequentialGroup()
                                                .addComponent(jLabel2)
                                                .addGap(91, 91, 91)
                                                .addComponent(cmbprodbox, javax.swing.GroupLayout.PREFERRED_SIZE, 113, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addGap(31, 31, 31)
                                                .addComponent(jLabel3)
                                                .addGap(62, 62, 62)
                                                .addComponent(cmbmodbox, javax.swing.GroupLayout.PREFERRED_SIZE, 109, javax.swing.GroupLayout.PREFERRED_SIZE))
                                            .addGroup(layout.createSequentialGroup()
                                                .addComponent(jButton1)
                                                .addGap(242, 242, 242)
                                                .addComponent(jLabel1)))
                                        .addGap(33, 33, 33)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addGroup(layout.createSequentialGroup()
                                                .addGap(8, 8, 8)
                                                .addComponent(txtdrcsrch, javax.swing.GroupLayout.PREFERRED_SIZE, 99, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(jButton3, javax.swing.GroupLayout.PREFERRED_SIZE, 97, javax.swing.GroupLayout.PREFERRED_SIZE))
                                            .addGroup(layout.createSequentialGroup()
                                                .addComponent(jLabel5)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                                .addComponent(txtoh, javax.swing.GroupLayout.PREFERRED_SIZE, 97, javax.swing.GroupLayout.PREFERRED_SIZE))))
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(jLabel6)
                                        .addGap(10, 10, 10)
                                        .addComponent(txtsc, javax.swing.GroupLayout.PREFERRED_SIZE, 113, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(30, 30, 30)
                                        .addComponent(jLabel7)
                                        .addGap(39, 39, 39)
                                        .addComponent(txtnp, javax.swing.GroupLayout.PREFERRED_SIZE, 82, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(60, 60, 60)
                                        .addComponent(jLabel8)
                                        .addGap(52, 52, 52)
                                        .addComponent(txtsep, javax.swing.GroupLayout.PREFERRED_SIZE, 97, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                        .addGap(11, 11, 11)))
                .addContainerGap(123, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(29, 29, 29)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jButton1)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jButton3)
                        .addComponent(jLabel1)
                        .addComponent(txtdrcsrch, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(38, 38, 38)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(cmbprodbox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(cmbmodbox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(3, 3, 3)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel2)
                                    .addComponent(jLabel3)
                                    .addComponent(jLabel5))))
                        .addGap(18, 18, 18))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtoh, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(3, 3, 3)
                        .addComponent(jLabel6))
                    .addComponent(txtsc, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(3, 3, 3)
                        .addComponent(jLabel7))
                    .addComponent(txtnp, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(2, 2, 2)
                        .addComponent(jLabel8))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(2, 2, 2)
                        .addComponent(txtsep, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(fatoryCost)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(7, 7, 7)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel9)
                            .addComponent(txtpf, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel4)
                            .addComponent(txtfcos, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addGap(27, 27, 27)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(btnAdd)
                    .addComponent(btnUpdate)
                    .addComponent(btnDelete)
                    .addComponent(btnReset))
                .addGap(27, 27, 27)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 123, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(166, Short.MAX_VALUE))
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void jTable1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTable1MouseClicked

        btnAdd.setEnabled(false);
        btnDelete.setEnabled(true);
        btnUpdate.setEnabled(true);
        
        int r =jTable1.getSelectedRow();

        String Product = jTable1.getValueAt(r, 0).toString();
        String model = jTable1.getValueAt(r, 1).toString();
        String factorycost = jTable1.getValueAt(r, 2).toString();
        String overhead = jTable1.getValueAt(r, 3).toString();
        String salescommision = jTable1.getValueAt(r, 4).toString();
        String netprice = jTable1.getValueAt(r, 5).toString();
        String sellingprice= jTable1.getValueAt(r, 6).toString();
        String  profrt = jTable1.getValueAt(r, 7).toString();
        //String  proft = jTable1.getValueAt(r, 8).toString();

        cmbprodbox.setSelectedItem(Product);
        cmbprodbox.setSelectedItem(model);

        txtfcos.setText(factorycost);
        txtoh.setText(overhead);
        txtsc.setText(salescommision);
        txtnp.setText(netprice);
        txtsep.setText(sellingprice);
        txtpf.setText(profrt);
    }//GEN-LAST:event_jTable1MouseClicked

    private void cmbprodboxItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_cmbprodboxItemStateChanged
        String s = cmbprodbox.getSelectedItem().toString();
        String sql = "SELECT * from furniture where product = '"+ s +"' ";
        try {
            PreparedStatement pst = con.prepareStatement(sql);
            ResultSet rs = pst.executeQuery();
            cmbmodbox.removeAllItems();
            while(rs.next())
            {
                //cmbModel.setSelectedItem("company");

                cmbmodbox.addItem(rs.getString("model"));
            }

        }
        catch (Exception e)
        {
            System.out.println(e);
            System.out.println("prod");
        }
    }//GEN-LAST:event_cmbprodboxItemStateChanged

    private void cmbprodboxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmbprodboxActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_cmbprodboxActionPerformed

    private void txtscActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtscActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtscActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed

        String search = txtdrcsrch.getText();
        String Product =cmbprodbox.getSelectedItem().toString();
        String model =cmbmodbox.getSelectedItem().toString() ;

        try{
            String sq1 ="Select product,model,factoryCost,overHead,overHeadRate,salesCommission,netPrice,sellingPrice,profit from furniturecost where product ='"+ Product +"' AND model ='"+ model  +"' or product like '%"+ search +"%'  ";
            pst =con.prepareStatement(sq1);
            rs =pst.executeQuery();
            jTable1.setModel(DbUtils.resultSetToTableModel(rs));
            
        }
        catch(Exception e)
        {
            System .out.println(e);
        }
        
        Reset();
//        
//        
//        try{
//            String sq1 ="Select product,model,factoryCost,overHead,salesCommission,netPrice,sellingPrice,profit from furniturecost where product= '"+ search +"'";
//            pst =con.prepareStatement(sq1);
//            rs =pst.executeQuery();
//            jTable1.setModel(DbUtils.resultSetToTableModel(rs));
//
//        }
//        catch(Exception e)
//        {
//            System .out.println(e);
//        }
        
        
        
        
        
    }//GEN-LAST:event_jButton3ActionPerformed

    private void cmbmodboxItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_cmbmodboxItemStateChanged
        // TODO add your handling code here:
    }//GEN-LAST:event_cmbmodboxItemStateChanged

    private void cmbmodboxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmbmodboxActionPerformed
        //       String product1=cmbprodbox.getSelectedItem().toString();
        //       String model1=cmbmodbox.getSelectedItem().toString();
        //
        //
        //        try {
            //            String q1="SELECT * FROM materialratio WHERE product='"+ product1 +"' and  model ='"+ model1 +"'";
            //            ps1=con.prepareStatement(q1);
            //            rs1=ps1.executeQuery();
            //
            //            while(rs1.next()){
                //        double rat=Double.parseDouble(rs1.getString("ratio"));
                //        String met=rs1.getString("material");
                //
           
    }//GEN-LAST:event_cmbmodboxActionPerformed

    private void fatoryCostActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_fatoryCostActionPerformed
        String product1=cmbprodbox.getSelectedItem().toString();
        String model1=cmbmodbox.getSelectedItem().toString();

        try {
            String q1="SELECT * FROM materialratio WHERE product='"+ product1 +"' and  model ='"+ model1 +"'";
            ps1=con.prepareStatement(q1);
            rs1=ps1.executeQuery();

            while(rs1.next()){
                double rat=Double.parseDouble(rs1.getString("ratio"));
                String met=rs1.getString("material");

                String q2=" SELECT unitPrice FROM orderinfo WHERE material ='"+ met +"'";
                ps2=con.prepareStatement(q2);
                rs2=ps2.executeQuery();
                while(rs2.next()){
                    double unitp=Double.parseDouble(rs2.getString("unitPrice"));
                    double fc=unitp*rat;
                  // txtfcos.setText(""+fc);

                    String sql3= "insert into finalfaccost (product,model,Total) " + " values('"+ product1 +"','"+ model1 +"',"+ fc +")";
                    pst = con.prepareStatement(sql3);
                    pst.execute();
                 
                   
                    
                    String sql = "SELECT SUM(Total) from finalfaccost WHERE product = '"+ product1 +"' AND model ='"+ model1 +"' ";
            pst = con.prepareStatement(sql);
            rs = pst.executeQuery();
            //while(rs.next()){
            if(rs.next())
            {
                String total = rs.getString("SUM(Total)");
            
                txtfcos.setText(""+total);
               // insertttt(total,product1, model1); 
                    
                    
            }
                    
                    
                    
                    
                    
                    
                    
                    
                    
                    
                     }
               System.out.println("cs");

            }

        } catch (Exception ex) {
            System.out.println(ex);
        }
    }//GEN-LAST:event_fatoryCostActionPerformed

    private void txtfcosActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtfcosActionPerformed

        // TODO add your handling code here:
    }//GEN-LAST:event_txtfcosActionPerformed

    private void txtsepActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtsepActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtsepActionPerformed

    private void btnResetActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnResetActionPerformed
        Reset();
    }//GEN-LAST:event_btnResetActionPerformed

    private void btnUpdateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnUpdateActionPerformed

        String overhead1 =txtoh.getText();
        
        if(overhead1.isEmpty())
        {
            JOptionPane.showMessageDialog(null,"Select the table raw");
        }
  
        else{
        //update something

        String faccost = txtfcos.getText();
        String proftrate = txtpf.getText();
        String salescomrate =txtsc.getText();
        String ovrheadrate = txtoh.getText();

        double profirt = Double.parseDouble(proftrate);
        double salecom = Double.parseDouble(salescomrate);
        double ovrhd = Double.parseDouble(ovrheadrate);
        double factrics = Double.parseDouble(faccost);
        double proft =   factrics * (profirt/100);
        double salecomis = factrics * (salecom/100);
        double ovrhead = factrics * (ovrhd/100);
        double netprice= factrics+ovrhead+salecomis;
        double sellprice =factrics+ovrhead+salecomis+proft;

        int x = JOptionPane.showConfirmDialog(null,"Do you realy want to update");

        if(x==0)
        {

            String Product =cmbprodbox.getSelectedItem().toString();
            String model =cmbmodbox.getSelectedItem().toString() ;
            String factorycost = txtfcos.getText() ;
            String overhead = txtoh.getText();
            String salescommision = txtsc.getText();
            //String netprice = txtnp.getText();
            String sellingprice=txtsep.getText() ;
            String profrt  = txtpf.getText();

            try{
                String sq1 ="UPDATE furniturecost set factoryCost = '"+ factorycost +"',overHeadRate = '"+ overhead +"', salesCommissionRate = '"+ salescommision +"', sellingPrice = '"+ sellingprice +"', profitRate	= '"+ profrt +"' ,profit ='"+ proft +"',salesCommission ='"+ salecomis +"',overHead ='"+ ovrhead +"',netprice ='"+ netprice+"',sellingPrice ='"+ sellprice +"'where  product ='"+ Product +"' AND model ='"+ model +"' ";
                pst = con.prepareStatement(sq1);
                pst.execute();
                tableload();
                Reset();
            }
            catch(Exception e)
            {
                System.out.println(e);
                System.out.println("update");
            }

        }
        }
    }//GEN-LAST:event_btnUpdateActionPerformed

    private void btnDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeleteActionPerformed

        //delete something
        String overhead1 =txtoh.getText();
        if(overhead1.isEmpty())
        {
            JOptionPane.showMessageDialog(null,"Select the table raw");
    
        }else{
        
        int x = JOptionPane.showConfirmDialog(null,"Do you realy want to Delete");
       
        
        if(x==0){
        String Product =cmbprodbox.getSelectedItem().toString();
        String model =cmbmodbox.getSelectedItem().toString() ;

        String sql ="DELETE from furniturecost where product = '"+ Product +"'  AND model = '"+ model +"' ";
        try{

            pst =con.prepareStatement(sql);
            pst.execute();
            tableload();
        }
        catch(Exception e)
        {
            System.out.println(e);
            System.out.println("delete");
        }
        
    }//GEN-LAST:event_btnDeleteActionPerformed
    }
    }
    private void btnAddActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddActionPerformed

        boolean check = validator();

        if (check == true){
            String product = cmbprodbox.getSelectedItem().toString();
            //System.out.println(product);
            String model = cmbmodbox.getSelectedItem().toString();
            //System.out.println(model);
            String faccost = txtfcos.getText();
            //System.out.println(faccost);

            String ovrheadrate = txtoh.getText();
            //System.out.println(ovrheadrate);
            String salescomrate = txtsc.getText();
            // System.out.println(salescomrate);
            //String netpr =txtnp.getText();
            //System.out.println(netpr);
            // String salepr =txtsp.getText();
            // System.out.println(salepr);
            String proftrate = txtpf.getText();
            //System.out.println(proftrate);

            double factrics = Double.parseDouble(faccost);
            double profrt = Double.parseDouble(proftrate);
            double ovrhd = Double.parseDouble(ovrheadrate);
            double salecom = Double.parseDouble(salescomrate);
            double salecomis = factrics * salecom/100;
            double proft =   factrics * (profrt/100);
            double ovrhead = factrics * ovrhd/100;
            double netprice = proft + ovrhead + salecomis + factrics;
            double salepr = (netprice * profrt) +netprice   ;

            try {
                String qu = "INSERT INTO furniturecost(product,model,factoryCost,overHeadRate,overHead,profitRate,profit,salesCommissionRate,salesCommission,netPrice,sellingPrice)"
                + " values('" + product + "','" + model + "'," + factrics + "," + ovrhd + "," + ovrhead + "," + profrt + "," + proft + "," + salecom + "," + salecomis + "," + netprice + "," + salepr + ")";
                pst = con.prepareStatement(qu);
                pst.execute();
                tableload();
                Reset();
            } catch (Exception e) {
                System.out.println(e);
                System.out.println("calc");
            }
        }
    }//GEN-LAST:event_btnAddActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        mainFinance x = new mainFinance();
        x.setVisible(true);
        this.dispose();
        
    }//GEN-LAST:event_jButton1ActionPerformed

    private void txtohKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtohKeyReleased
        // TODO add your handling code here:
        //genarte error messgae
                String faccos =txtoh.getText();
         
        for(int i =0; i<faccos.length(); i++){
        
        char c = faccos.charAt(i);
        
        if(Character.isDigit(c))
        {
            
        }
        else if(Character.isLetter(c))
        {
            JOptionPane.showMessageDialog(null, "This field cannot have letters", "Error",0);
            txtoh.setText(" ");
 
            break;
        }
        }
        
    }//GEN-LAST:event_txtohKeyReleased

    private void txtscKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtscKeyReleased
        // TODO add your handling code here:
        
        String faccos =txtsc.getText();
         
        for(int i =0; i<faccos.length(); i++){
        
        char c = faccos.charAt(i);
        
        if(Character.isDigit(c))
        {
            
        }
        else if(Character.isLetter(c))
        {
            JOptionPane.showMessageDialog(null, "This field cannot have letters", "Error",0);
            txtsc.setText(" ");
 
            break;
        }
        }
    }//GEN-LAST:event_txtscKeyReleased

    private void txtpfKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtpfKeyReleased
        // TODO add your handling code here:
        
        String faccos =txtpf.getText();
         
        for(int i =0; i<faccos.length(); i++){
        
        char c = faccos.charAt(i);
        
        if(Character.isDigit(c))
        {
            
        }
        else if(Character.isLetter(c))
        {
            JOptionPane.showMessageDialog(null, "This field cannot have letters", "Error",0);
            txtpf.setText(" ");
 
            break;
        }
        }
        
    }//GEN-LAST:event_txtpfKeyReleased

    private void txtfcosKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtfcosKeyReleased

        String faccos =txtfcos.getText();
         
        for(int i =0; i<faccos.length(); i++){
        
        char c = faccos.charAt(i);
        
        if(Character.isDigit(c))
        {
            
        }
        else if(Character.isLetter(c))
        {
            JOptionPane.showMessageDialog(null, "This field cannot have letters", "Error",0);
            txtfcos.setText(" ");
 
            break;
        }
        }

    }//GEN-LAST:event_txtfcosKeyReleased

    private void txtsepKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtsepKeyReleased
        // TODO add your handling code here:
        
        String faccos =txtsep.getText();
         
        for(int i =0; i<faccos.length(); i++)
        {
        
            char c = faccos.charAt(i);
        
            if(Character.isDigit(c))
            {
            
            }
            else if(Character.isLetter(c))
            {
                JOptionPane.showMessageDialog(null, "This field cannot have letters", "Error",0);
                txtsep.setText(" ");
 
                break;
            }
        }
        
    }//GEN-LAST:event_txtsepKeyReleased

    private void txtohKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtohKeyTyped
        
    }//GEN-LAST:event_txtohKeyTyped

    
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(cost.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(cost.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(cost.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(cost.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new cost().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAdd;
    private javax.swing.JButton btnDelete;
    private javax.swing.JButton btnReset;
    private javax.swing.JButton btnUpdate;
    private javax.swing.JComboBox cmbmodbox;
    private javax.swing.JComboBox cmbprodbox;
    private javax.swing.JButton fatoryCost;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton3;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTable1;
    private javax.swing.JTextField txtdrcsrch;
    private javax.swing.JTextField txtfcos;
    private javax.swing.JLabel txtnp;
    private javax.swing.JTextField txtoh;
    private javax.swing.JTextField txtpf;
    private javax.swing.JTextField txtsc;
    private javax.swing.JTextField txtsep;
    // End of variables declaration//GEN-END:variables
}
